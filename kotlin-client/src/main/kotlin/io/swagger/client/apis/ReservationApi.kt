/**
 * EzBookingAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ProblemDetails
import io.swagger.client.models.Reservation

import io.swagger.client.infrastructure.*
import io.swagger.client.models.House

class ReservationApi(basePath: kotlin.String = "/") : ApiClient(basePath) {

    /**
     * Obtém todas as Reservas.
     * 
     * @return kotlin.Array<Reservation>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiReservationGet(token: String?): kotlin.Array<Reservation> {


        val headers = mutableMapOf(
            "Authorization" to "Bearer ${token}"
        )

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/Reservation",
                headers = headers
        )
        val response = request<kotlin.Array<Reservation>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Reservation>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Apaga uma Reserva
     * 
     * @param id ID da Reserva 
     * @return void
     */
    fun apiReservationIdDelete(id: kotlin.Int): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/Reservation/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Obtém uma Reserva
     * 
     * @param id  
     * @return Reservation
     */
    @Suppress("UNCHECKED_CAST")
    fun apiReservationIdGet(id: kotlin.Int): Reservation {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/Reservation/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Reservation>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Reservation
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
     * Obtém Ultima Reserva para Pagar.
     *
     * @param userId  (optional)
     * @return kotlin.Array<Reservation>
     */
    @Suppress("UNCHECKED_CAST")
    fun paymentGet(userId: kotlin.Int? = null,token: String?): Reservation {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {

            if (userId != null) {
                put("userId", listOf(userId.toString()))
            }
        }
        val headers = mutableMapOf(
            "Authorization" to "Bearer ${token}"
        )
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/Payment", query = localVariableQuery,headers = headers
        )
        val response = request<Reservation>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Reservation
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
     * Atualiza uma Reserva
     * 
     * @param id ID da Reserva 
     * @param body  (optional)
     * @return void
     */
    fun apiReservationIdPut(id: kotlin.Int, body: Reservation? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/Reservation/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Cria uma Reserva
     * 
     * @param body  (optional)
     * @param houseId  (optional)
     * @param userId  (optional)
     * @return Reservation
     */
    fun apiReservationPost(body: Reservation? = null, houseId: kotlin.Int? = null, userId: kotlin.Int? = null,token: String?): Unit {
        val localVariableBody: kotlin.Any? = body
        val headers = mutableMapOf(
            "Authorization" to "Bearer ${token}"
        )
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (houseId != null) {
                put("houseId", listOf(houseId.toString()))
            }
            if (userId != null) {
                put("userId", listOf(userId.toString()))
            }
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/Reservation", query = localVariableQuery,headers = headers
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Cancela Reserva
     * 
     * @param reservationId ID da Reserva 
     * @return void
     */
    fun apiReservationReservationIdDeactivatePut(token : String?, reservationId: kotlin.Int): Unit {
        val headers = mutableMapOf(
            "Authorization" to "Bearer ${token}"
        )
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/Reservation/{reservationId}/Deactivate".replace("{" + "reservationId" + "}", "$reservationId"),
            headers = headers
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Altera Estado da reserva para Aprovado.
     * 
     * @param id O ID da Reserva 
     * @return void
     */
    fun apiReservationStateAproveIdPut(id: kotlin.Int): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/Reservation/stateAprove/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Altera Estado da reserva.
     * 
     * @param id O ID da Reserva 
     * @param stateId  (optional)
     * @return void
     */
    fun apiReservationStateIdPut(id: kotlin.Int, stateId: kotlin.Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (stateId != null) {
                put("stateId", listOf(stateId.toString()))
            }
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/Reservation/state/{id}".replace("{" + "id" + "}", "$id"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
