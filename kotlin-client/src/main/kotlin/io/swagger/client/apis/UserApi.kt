/**
 * EzBookingAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ProblemDetails
import io.swagger.client.models.User

import io.swagger.client.infrastructure.*
import io.swagger.client.models.EditProfile
import io.swagger.client.models.House
import io.swagger.client.models.Reservation

class UserApi(basePath: kotlin.String = "/") : ApiClient(basePath) {

    /**
     * Altera avatar do utilizador
     *
     * @param imageFile  (optional)
     * @return void
     */
    fun apiUserAvatarPut(token : String?, imageFile: kotlin.Array<kotlin.Byte>? = null): Unit {
        val headers = mutableMapOf(
            "Authorization" to "Bearer ${token}"
        )
        println(imageFile)
        val localVariableBody: kotlin.Any? = mapOf("ImageFile" to "$imageFile")
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/api/User/avatar", headers = headers
        )
        val response = request<Any?>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Obtém todos os utilizadores.
     * 
     * @return kotlin.Array<User>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiUserGet(token: String?): kotlin.Array<User> {


        val headers = mutableMapOf(
            "Authorization" to "Bearer ${token}"
        )

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/User",
                headers = headers

        )
        val response = request<kotlin.Array<User>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<User>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Atualiza o perfil do utilizador
     *
     * @param userId ID do utilizador
     * @param body  (optional)
     * @return void
     */
    fun apiUserUserIdProfilePut(token: String?, userId: kotlin.Int, body: EditProfile? = null): Unit {
        val headers = mutableMapOf(
            "Authorization" to "Bearer ${token}"
        )
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/api/User/{userId}/profile".replace("{" + "userId" + "}", "$userId"),
            headers = headers
        )
        val response = request<Any?>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     *
     *
     * @param id
     * @return kotlin.Array<House>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiUserHousesIdGet(token : String?, id: kotlin.Int): kotlin.Array<House> {
        val headers = mutableMapOf(
            "Authorization" to "Bearer ${token}"
        )
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/User/Houses/{id}".replace("{" + "id" + "}", "$id"),
            headers = headers
        )
        val response = request<kotlin.Array<House>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<House>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Cria um utilizador
     * 
     * @param body  (optional)
     * @return void
     */
    fun apiUserPost(name : String, email: String, password: String, phone : Int): Unit {
        val body = User(name = name, email = email, password = password, phone = phone)
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/User"
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Obtém Reservas do Utilizador
     *
     * @param id O ID do Utilizador
     * @return kotlin.Array<Reservation>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiUserReservationsIdGet(token : String?, id: kotlin.Int): kotlin.Array<Reservation> {

        val headers = mutableMapOf(
            "Authorization" to "Bearer ${token}"
        )

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/User/Reservations/{id}".replace("{" + "id" + "}", "$id"),
            headers = headers
        )
        val response = request<kotlin.Array<Reservation>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Reservation>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Altera estado do utilizador
     * 
     * @param userId ID do utilizador 
     * @return void
     */
    fun apiUserUserIdDeactivatePut(token : String?, userId: kotlin.Int): Unit {
        val headers = mutableMapOf(
            "Authorization" to "Bearer ${token}"
        )

        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/User/{userId}/Deactivate".replace("{" + "userId" + "}", "$userId"),
                headers = headers
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Apaga um utilizador
     * 
     * @param userId ID do utilizador 
     * @return void
     */
    fun apiUserUserIdDelete(userId: kotlin.Int): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/User/{userId}".replace("{" + "userId" + "}", "$userId")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Obtém um utilizador
     * 
     * @param userId O ID do Utilizador 
     * @return User
     */
    @Suppress("UNCHECKED_CAST")
    fun apiUserUserIdGet(token : String?, userId: kotlin.Int): User {
        val headers = mutableMapOf(
            "Authorization" to "Bearer ${token}"
        )
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/User/{userId}".replace("{" + "userId" + "}", "$userId"),
            headers = headers
        )
        val response = request<User>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as User
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Atualiza um utilizador
     * 
     * @param userId ID do utilizador 
     * @param body  (optional)
     * @return void
     */
    fun apiUserUserIdPut(token : String?, userId: kotlin.Int, body: User? = null): Unit {
        val headers = mutableMapOf(
            "Authorization" to "Bearer ${token}"
        )
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/User/{userId}".replace("{" + "userId" + "}", "$userId"),
            headers = headers
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
